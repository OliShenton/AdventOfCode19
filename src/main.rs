// use qs::q1;
use qs::q2;

mod qs {
    // pub mod q1;
    pub mod q2;
}

fn main() {
    // let masses = 
    //     "50669
    //     83199
    //     108957
    //     102490
    //     121216
    //     57848
    //     76120
    //     121042
    //     143774
    //     106490
    //     76671
    //     119551
    //     109598
    //     124949
    //     148026
    //     119862
    //     112854
    //     96289
    //     73573
    //     142714
    //     109875
    //     126588
    //     69748
    //     62766
    //     104446
    //     61766
    //     133199
    //     118306
    //     141410
    //     64420
    //     129370
    //     69444
    //     104178
    //     109696
    //     54654
    //     126517
    //     138265
    //     87100
    //     130934
    //     138946
    //     118078
    //     135109
    //     137330
    //     130913
    //     50681
    //     53071
    //     63070
    //     144616
    //     64122
    //     122603
    //     86612
    //     144666
    //     62572
    //     72247
    //     79005
    //     102223
    //     82585
    //     54975
    //     68539
    //     107964
    //     148333
    //     100269
    //     134101
    //     115960
    //     75866
    //     99371
    //     56685
    //     142199
    //     102107
    //     84075
    //     112733
    //     92180
    //     131056
    //     142803
    //     145495
    //     70900
    //     73129
    //     60764
    //     77576
    //     99160
    //     61897
    //     78675
    //     100890
    //     74787
    //     131911
    //     93106
    //     91267
    //     142663
    //     130649
    //     103857
    //     81178
    //     78896
    //     73745
    //     84463
    //     92926
    //     121715
    //     74959
    //     71911
    //     89102
    //     53428";
    // q1::q1a(String::from(masses));
    // q1::q1b(String::from(masses));
    let intcode = vec![1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,10,1,19,1,19,9,23,1,23,6,27,2,27,13,31,1,10,31,35,1,10,35,39,2,39,6,43,1,43,5,47,2,10,47,51,1,5,51,55,1,55,13,59,1,59,9,63,2,9,63,67,1,6,67,71,1,71,13,75,1,75,10,79,1,5,79,83,1,10,83,87,1,5,87,91,1,91,9,95,2,13,95,99,1,5,99,103,2,103,9,107,1,5,107,111,2,111,9,115,1,115,6,119,2,13,119,123,1,123,5,127,1,127,9,131,1,131,10,135,1,13,135,139,2,9,139,143,1,5,143,147,1,13,147,151,1,151,2,155,1,10,155,0,99,2,14,0,0];
    // println!("Output: {:?}", q2::q2(intcode.clone(), 12, 2));
    let mut i = 0_usize;
    let mut j = 0_usize;
    loop {
        while j <= i {
            let ans = q2::q2(intcode.clone(), i, j);
            if ans == Ok(19690720) { println!("Solution is i={}, j={}, giving {}", i, j, 100*i + j ); break; }
            j += 1;
        }
        i += 1;
        j = 0;
    }
    
}